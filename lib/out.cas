CASL	START	BEGIN
BEGIN	LAD	GR6, 0
	LAD	GR7, LIBBUF
	PUSH	1
	LD	GR2, =53
	POP	GR1
	ST	GR1, VAR, GR2
	PUSH	1
	LD	GR2, =54
	POP	GR1
	ST	GR1, VAR, GR2
LOOP0	NOP
	LD	 GR2, =54
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	11
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JPL	TRUE0
	LD	GR1, =#0000
	JUMP	BOTH0
TRUE0	LD	GR1, =#FFFF
BOTH0	PUSH	0, GR1
	POP	GR1
	CPL	GR1, =#FFFF
	JZE	ENDLP0
	LD	 GR2, =54
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR3
	PUSH	11111
	ADDA	 GR3, =41
	POP	GR1
	ST	GR1, VAR, GR3
	LD	 GR2, =54
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	1
	POP	GR2
	POP	GR1
	ADDA	GR1, GR2
	PUSH	0, GR1
	LD	GR2, =54
	POP	GR1
	ST	GR1, VAR, GR2
	JUMP	LOOP0
ENDLP0	NOP
	PUSH	1
	LD	GR2, =0
	POP	GR1
	ST	GR1, VAR, GR2
LOOP2	NOP
	LD	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	41
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JPL	TRUE2
	LD	GR1, =#0000
	JUMP	BOTH2
TRUE2	LD	GR1, =#FFFF
BOTH2	PUSH	0, GR1
	POP	GR1
	CPL	GR1, =#FFFF
	JZE	ENDLP2
	LD	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR3
	LD	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	21
	POP	GR2
	POP	GR1
	SUBA	GR1, GR2
	PUSH	0, GR1
	LD	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	21
	POP	GR2
	POP	GR1
	SUBA	GR1, GR2
	PUSH	0, GR1
	POP	GR2
	POP	GR1
	CALL	MULT
	PUSH	0, GR2
	PUSH	180
	POP	GR2
	POP	GR1
	SUBA	GR1, GR2
	PUSH	0, GR1
	ADDA	 GR3, =0
	POP	GR1
	ST	GR1, VAR, GR3
	LD	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	 GR2
	ADDA	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	LD	 GR2, =53
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JPL	TRUE4
	LD	GR1, =#FFFF
	JUMP	BOTH4
TRUE4	LD	GR1, =#0000
BOTH4	PUSH	0, GR1
	POP	GR1
	CPA	GR1, =#FFFF
	JZE	ELSE4
	LD	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	 GR2
	ADDA	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	LD	GR2, =53
	POP	GR1
	ST	GR1, VAR, GR2
	JUMP	ENDIF4
ELSE4	NOP
	LD	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	LD	GR1, =0
	SUBA	GR1, GR2
	PUSH	0, GR1
	POP	 GR2
	ADDA	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	LD	 GR2, =53
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JPL	TRUE6
	LD	GR1, =#FFFF
	JUMP	BOTH6
TRUE6	LD	GR1, =#0000
BOTH6	PUSH	0, GR1
	POP	GR1
	CPA	GR1, =#FFFF
	JZE	ELSE6
	LD	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	LD	GR1, =0
	SUBA	GR1, GR2
	PUSH	0, GR1
	POP	 GR2
	ADDA	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	LD	GR2, =53
	POP	GR1
	ST	GR1, VAR, GR2
ELSE6	NOP
ENDIF4	NOP
	LD	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	1
	POP	GR2
	POP	GR1
	ADDA	GR1, GR2
	PUSH	0, GR1
	LD	GR2, =0
	POP	GR1
	ST	GR1, VAR, GR2
	JUMP	LOOP2
ENDLP2	NOP
	PUSH	1
	LD	GR2, =0
	POP	GR1
	ST	GR1, VAR, GR2
LOOP8	NOP
	LD	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	41
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JPL	TRUE8
	LD	GR1, =#0000
	JUMP	BOTH8
TRUE8	LD	GR1, =#FFFF
BOTH8	PUSH	0, GR1
	POP	GR1
	CPL	GR1, =#FFFF
	JZE	ENDLP8
	PUSH	5
	POP	GR3
	PUSH	11110
	ADDA	 GR3, =41
	POP	GR1
	ST	GR1, VAR, GR3
	LD	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	 GR2
	ADDA	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	25
	POP	GR2
	POP	GR1
	CALL	MULT
	PUSH	0, GR2
	LD	 GR2, =53
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	POP	GR1
	CALL	DIV
	PUSH	0, GR2
	PUSH	25
	POP	GR2
	POP	GR1
	ADDA	GR1, GR2
	PUSH	0, GR1
	LD	GR2, =55
	POP	GR1
	ST	GR1, VAR, GR2
	LD	 GR2, =55
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	5
	POP	GR2
	POP	GR1
	CALL	DIV
	PUSH	0, GR2
	LD	GR2, =56
	POP	GR1
	ST	GR1, VAR, GR2
	LD	 GR2, =55
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	5
	POP	GR2
	POP	GR1
	CALL	MULT
	PUSH	0, GR2
	POP	GR2
	POP	GR1
	SUBA	GR1, GR2
	PUSH	0, GR1
	LD	GR2, =57
	POP	GR1
	ST	GR1, VAR, GR2
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	1
	POP	GR2
	POP	GR1
	ADDA	GR1, GR2
	PUSH	0, GR1
	LD	GR2, =56
	POP	GR1
	ST	GR1, VAR, GR2
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	5
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JZE	TRUE10
	LD	GR1, =#FFFF
	JUMP	BOTH10
TRUE10	LD	GR1, =#0000
BOTH10	PUSH	0, GR1
	POP	GR1
	CPA	GR1, =#FFFF
	JZE	ELSE10
	LD	 GR2, =57
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	0
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JZE	TRUE12
	LD	GR1, =#FFFF
	JUMP	BOTH12
TRUE12	LD	GR1, =#0000
BOTH12	PUSH	0, GR1
	POP	GR1
	CPA	GR1, =#FFFF
	JZE	ELSE12
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR3
	PUSH	31110
	ADDA	 GR3, =41
	POP	GR1
	ST	GR1, VAR, GR3
	JUMP	ENDIF12
ELSE12	NOP
	LD	 GR2, =57
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	1
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JZE	TRUE14
	LD	GR1, =#FFFF
	JUMP	BOTH14
TRUE14	LD	GR1, =#0000
BOTH14	PUSH	0, GR1
	POP	GR1
	CPA	GR1, =#FFFF
	JZE	ELSE14
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR3
	PUSH	13110
	ADDA	 GR3, =41
	POP	GR1
	ST	GR1, VAR, GR3
	JUMP	ENDIF14
ELSE14	NOP
	LD	 GR2, =57
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	2
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JZE	TRUE16
	LD	GR1, =#FFFF
	JUMP	BOTH16
TRUE16	LD	GR1, =#0000
BOTH16	PUSH	0, GR1
	POP	GR1
	CPA	GR1, =#FFFF
	JZE	ELSE16
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR3
	PUSH	11310
	ADDA	 GR3, =41
	POP	GR1
	ST	GR1, VAR, GR3
	JUMP	ENDIF16
ELSE16	NOP
	LD	 GR2, =57
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	3
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JZE	TRUE18
	LD	GR1, =#FFFF
	JUMP	BOTH18
TRUE18	LD	GR1, =#0000
BOTH18	PUSH	0, GR1
	POP	GR1
	CPA	GR1, =#FFFF
	JZE	ELSE18
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR3
	PUSH	11130
	ADDA	 GR3, =41
	POP	GR1
	ST	GR1, VAR, GR3
	JUMP	ENDIF18
ELSE18	NOP
	LD	 GR2, =57
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	4
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JZE	TRUE20
	LD	GR1, =#FFFF
	JUMP	BOTH20
TRUE20	LD	GR1, =#0000
BOTH20	PUSH	0, GR1
	POP	GR1
	CPA	GR1, =#FFFF
	JZE	ELSE20
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR3
	PUSH	11113
	ADDA	 GR3, =41
	POP	GR1
	ST	GR1, VAR, GR3
ELSE20	NOP
ENDIF18	NOP
ENDIF16	NOP
ENDIF14	NOP
ENDIF12	NOP
	JUMP	ENDIF10
ELSE10	NOP
	LD	 GR2, =57
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	0
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JZE	TRUE22
	LD	GR1, =#FFFF
	JUMP	BOTH22
TRUE22	LD	GR1, =#0000
BOTH22	PUSH	0, GR1
	POP	GR1
	CPA	GR1, =#FFFF
	JZE	ELSE22
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR3
	PUSH	31111
	ADDA	 GR3, =41
	POP	GR1
	ST	GR1, VAR, GR3
	JUMP	ENDIF22
ELSE22	NOP
	LD	 GR2, =57
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	1
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JZE	TRUE24
	LD	GR1, =#FFFF
	JUMP	BOTH24
TRUE24	LD	GR1, =#0000
BOTH24	PUSH	0, GR1
	POP	GR1
	CPA	GR1, =#FFFF
	JZE	ELSE24
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR3
	PUSH	13111
	ADDA	 GR3, =41
	POP	GR1
	ST	GR1, VAR, GR3
	JUMP	ENDIF24
ELSE24	NOP
	LD	 GR2, =57
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	2
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JZE	TRUE26
	LD	GR1, =#FFFF
	JUMP	BOTH26
TRUE26	LD	GR1, =#0000
BOTH26	PUSH	0, GR1
	POP	GR1
	CPA	GR1, =#FFFF
	JZE	ELSE26
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR3
	PUSH	11311
	ADDA	 GR3, =41
	POP	GR1
	ST	GR1, VAR, GR3
	JUMP	ENDIF26
ELSE26	NOP
	LD	 GR2, =57
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	3
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JZE	TRUE28
	LD	GR1, =#FFFF
	JUMP	BOTH28
TRUE28	LD	GR1, =#0000
BOTH28	PUSH	0, GR1
	POP	GR1
	CPA	GR1, =#FFFF
	JZE	ELSE28
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR3
	PUSH	11131
	ADDA	 GR3, =41
	POP	GR1
	ST	GR1, VAR, GR3
	JUMP	ENDIF28
ELSE28	NOP
	LD	 GR2, =57
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	4
	POP	 GR2
	POP	 GR1
	CPA	 GR1, GR2
	JZE	TRUE30
	LD	GR1, =#FFFF
	JUMP	BOTH30
TRUE30	LD	GR1, =#0000
BOTH30	PUSH	0, GR1
	POP	GR1
	CPA	GR1, =#FFFF
	JZE	ELSE30
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR3
	PUSH	11113
	ADDA	 GR3, =41
	POP	GR1
	ST	GR1, VAR, GR3
ELSE30	NOP
ENDIF28	NOP
ENDIF26	NOP
ENDIF24	NOP
ENDIF22	NOP
ENDIF10	NOP
	PUSH	1
	POP	 GR2
	ADDA	 GR2, =41
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	CALL	WRTINT
	PUSH	2
	POP	 GR2
	ADDA	 GR2, =41
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	CALL	WRTINT
	PUSH	3
	POP	 GR2
	ADDA	 GR2, =41
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	CALL	WRTINT
	PUSH	4
	POP	 GR2
	ADDA	 GR2, =41
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	CALL	WRTINT
	PUSH	5
	POP	 GR2
	ADDA	 GR2, =41
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	CALL	WRTINT
	PUSH	6
	POP	 GR2
	ADDA	 GR2, =41
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	CALL	WRTINT
	PUSH	7
	POP	 GR2
	ADDA	 GR2, =41
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	CALL	WRTINT
	PUSH	8
	POP	 GR2
	ADDA	 GR2, =41
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	CALL	WRTINT
	PUSH	9
	POP	 GR2
	ADDA	 GR2, =41
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	CALL	WRTINT
	PUSH	10
	POP	 GR2
	ADDA	 GR2, =41
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	CALL	WRTINT
	PUSH	11
	POP	 GR2
	ADDA	 GR2, =41
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	CALL	WRTINT
	LD	 GR1, =2
	PUSH	0, GR1
	LAD	GR2, CHAR0
	PUSH	0, GR2
	POP	GR2
	POP	GR1
	CALL	WRTSTR
	LD	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR2
	CALL	WRTINT
	CALL	WRTLN
	LD	 GR2, =0
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	PUSH	1
	POP	GR2
	POP	GR1
	ADDA	GR1, GR2
	PUSH	0, GR1
	LD	GR2, =0
	POP	GR1
	ST	GR1, VAR, GR2
	LD	 GR2, =56
	LD	GR1, VAR, GR2
	PUSH	0, GR1
	POP	GR3
	PUSH	11111
	ADDA	 GR3, =41
	POP	GR1
	ST	GR1, VAR, GR3
	JUMP	LOOP8
ENDLP8	NOP
	RET
CHAR0	DC	'  '
VAR	DS	58
LIBBUF	DS	256
	END
; lib.cas
;============================================================
; MULT: 掛け算を行うサブルーチン
; GR1 * GR2 -> GR2
MULT	START
	PUSH	0,GR1	; GR1の内容をスタックに退避
	PUSH	0,GR3	; GR3の内容をスタックに退避
	PUSH	0,GR4	; GR4の内容をスタックに退避
	PUSH	0,GR5	; GR5の内容をスタックに退避
	LAD	GR5,0	; GR5を初期化
	LAD	GR3,0	; GR3を初期化
	LD	GR4,GR2
	JPL	LOOP
	LD	GR5,=1
	XOR	GR4,=#FFFF
	ADDA	GR4,=1
LOOP	SRL	GR4,1
	JOV	ONE
	JUMP	ZERO
ONE	ADDL	GR3,GR1
ZERO	SLL	GR1,1
	AND	GR4,GR4
	JNZ	LOOP
	CPA	GR5,=1
	JZE REV
	JUMP END
REV	XOR	GR3,=#FFFF
	ADDA	GR3,=1
END	LD	GR2,GR3
	POP	GR5
	POP	GR4
	POP	GR3
	POP	GR1
	RET
	END
;============================================================
; DIV 割り算を行うサブルーチン
; GR1 / GR2 -> 商は GR2, 余りは GR1
DIV	START
	PUSH	0,GR3
	ST	GR1,A
	ST	GR2,B
	CPA	GR1,=0
	JPL	SKIPA
	XOR	GR1,=#FFFF
	ADDA	GR1,=1
SKIPA	CPA	GR2,=0
	JZE	SKIPD
	JPL	SKIPB
	XOR	GR2,=#FFFF
	ADDA	GR2,=1
SKIPB	LD	GR3,=0
LOOP	CPA	GR1,GR2
	JMI	STEP
	SUBA	GR1,GR2
	LAD	GR3,1,GR3
	JUMP	LOOP
STEP	LD	GR2,GR3
	LD	GR3,A
	CPA	GR3,=0
	JPL	SKIPC
	XOR	GR1,=#FFFF
	ADDA	GR1,=1
SKIPC	XOR	GR3,B
	CPA	GR3,=0
	JZE	SKIPD
	JPL	SKIPD
	XOR	GR2,=#FFFF
	ADDA	GR2,=1
SKIPD	POP	GR3
	RET
A	DS	1
B	DS	1
	END
;============================================================
; 入力装置から数値データを読み込み，
; その内容をGR2が指すアドレスに格納するサブルーチン
RDINT	START
	PUSH	0,GR1	; GR1の内容をスタックに退避
	PUSH	0,GR3	; GR3の内容をスタックに退避
	PUSH	0,GR4	; GR4の内容をスタックに退避
	PUSH	0,GR5	; GR5の内容をスタックに退避
	PUSH	0,GR6	; GR6の内容をスタックに退避
	LD	GR5,GR2	; GR2が指す番地をGR5にコピー
	LD	GR2,=0	; GR2を初期化
	LD	GR3,=0	; GR3を初期化
	IN	INAREA,INLEN	; 入力を受け取る
	; 入力がnullかどうかのチェック
	CPA	GR3,INLEN
	JZE	ERROR
	; 最初の文字が'-'かどうかのチェック
	LD	GR4,INAREA,GR3
	LAD	GR3,1,GR3
	LD	GR6,GR4	; GR6に入力された先頭の文字を保存
	CPL	GR4,=#002D	; '-'かどうか
	JZE	LOOP
	CPL	GR4,='0'	; 数値かどうかのチェック
	JMI	ERROR
	CPL	GR4,='9'
	JPL	ERROR
	XOR	GR4,=#0030	; 数値だったら変換
	ADDA	GR2,GR4
	; 「すでに読み込んだ数値を10倍して，新しく読み込んだ数値と足す」を繰り返す
LOOP	CPA	GR3,INLEN
	JZE	CODE	; 入力された文字数とGR3が同じであればループを抜ける
	LD	GR1,=10
	CALL	MULT	; GR2の値を10倍する
	LD	GR4,INAREA,GR3
	CPL	GR4,='0'	; 数値かどうかのチェック
	JMI	ERROR
	CPL	GR4,='9'
	JPL	ERROR
	XOR	GR4,=#0030	; GR4の内容を数値に変換
	ADDA	GR2,GR4	; GR2にGR1の内容を足す
	LAD	GR3,1,GR3	; GR3(ポインタ)をインクリメント
	JUMP	LOOP
	; 最初の文字が'-'であった場合は-1倍する
CODE	CPL	GR6,=#002D
	JNZ	END
	XOR	GR2,=#FFFF
	LAD	GR2,1,GR2
	JUMP	END
	; エラーを出力する
ERROR	OUT	ERRSTR,ERRLEN
END	ST	GR2,0,GR5	; GR2の内容をGR5が指す番地に格納する
	LD	GR2,GR5	; GR5が指す番地をGR2に戻す
	POP	GR6
	POP	GR5
	POP	GR4
	POP	GR3
	POP	GR1
	RET
ERRSTR	DC	'illegal input'
ERRLEN	DC	13
INAREA	DS	6
INLEN	DS	1
	END
;============================================================
; 入力装置から文字を読み込み，
; その内容をGR2が指すアドレスに格納するサブルーチン
RDCH	START
	IN	INCHAR,INLEN
	LD	GR1,INCHAR
	ST	GR1,0,GR2
	RET
INCHAR	DS	1
INLEN	DS	1
	END
;============================================================
; 入力装置から，GR1の文字数を読み込む．
; 読み込んだ文字列は，GR2 が指すアドレスから順に格納される
RDSTR	START
	PUSH	0,GR3	; GR3の内容をスタックに退避
	PUSH	0,GR4	; GR4の内容をスタックに退避
	PUSH	0,GR5	; GR5の内容をスタックに退避
	LAD	GR4,0	; GR4を初期化
	IN	INSTR,INLEN
LOOP	CPA	GR4,GR1
	JZE	END	; GR1で指定された文字数を超えたら終わり
	CPA	GR4,INLEN
	JZE	END	; 入力された文字数を超えたら終わり
	LD	GR5,GR2
	ADDA	GR5,GR4	; 文字の格納先番地を計算
	LD	GR3,INSTR,GR4
	ST	GR3,0,GR5
	LAD	GR4,1,GR4
	JUMP	LOOP
END	POP	GR5
	POP	GR4
	POP	GR3
	RET
INSTR	DS	256
INLEN	DS	1
	END
;============================================================
; 入力装置からの文字列を改行まで読み飛ばすサブルーチン
RDLN	START
	IN	INAREA,INLEN
	RET
INAREA	DS	256
INLEN	DS	1
	END
;============================================================
; GR2の内容（数値データ）を出力装置に書き出すサブルーチン
; このサブルーチンが呼ばれたとき，
; GR7には，出力用番地の先頭アドレスが，
; GR6には，現在出力用番地に入っている文字数が，
; それぞれ格納されている．
WRTINT	START
	PUSH	0,GR1	; GR1の内容をスタックに退避
	PUSH	0,GR2	; GR2の内容をスタックに退避
	PUSH	0,GR3	; GR3の内容をスタックに退避
	PUSH	0,GR2	; 数値データをもう一度スタックに退避
	LD	GR3,=0	; GR3はインデックスとして用いる
	; 数値データが負数である場合は，正の数に変換
	CPA	GR2,=0
	JPL	LOOP1
	XOR	GR2,=#FFFF
	ADDA	GR2,=1
	; 数値データを変換しながら，バッファに格納
LOOP1	LD	GR1,GR2
	LD	GR2,=10
	CALL	DIV
	XOR	GR1,=#0030
	ST	GR1,BUFFER,GR3
	LAD	GR3,1,GR3
	CPA	GR2,=0
	JNZ	LOOP1
	; 数値データが負数であれば，'-'を追加
	POP	GR2
	CPA	GR2,=0
	JZE	LOOP2
	JPL	LOOP2
	LD	GR1,='-'
	ST	GR1,BUFFER,GR3
	LAD	GR3,1,GR3
	; BUFFERを逆順にたどりながら，出力用バッファに格納
LOOP2	LAD	GR3,-1,GR3
	LD	GR1,BUFFER,GR3
	LD	GR2,GR7
	ADDA	GR2,GR6
	ST	GR1,0,GR2
	LAD	GR6,1,GR6
	CPA	GR3,=0
	JNZ	LOOP2
END	POP	GR3
	POP	GR2
	POP	GR1
	RET
BUFFER	DS	6
	END
;============================================================
; GR2の内容（文字）を出力装置に書き出すサブルーチン
; このサブルーチンが呼ばれたとき，
; GR7には，出力用番地の先頭アドレスが，
; GR6には，現在出力用番地に入っている文字数が，
; それぞれ格納されている．
WRTCH	START
	PUSH	0,GR1	; GR1の内容をスタックに退避
	LD	GR1,GR7
	ADDA	GR1,GR6	; GR1に次の文字を格納する番地を代入
	ST	GR2,0,GR1
	LAD	GR6,1,GR6
	POP	GR1
	RET
	END
;============================================================
; GR2の指すメモリ番地から，長さGR1の文字列を出力装置に書き出すサブルーチン
; このサブルーチンが呼ばれたとき，
; GR7には，出力用番地の先頭アドレスが，
; GR6には，現在出力用番地に入っている文字数が，
; それぞれ格納されている．
WRTSTR	START
	PUSH	0,GR3	; GR3の内容をスタックに退避
	PUSH	0,GR4	; GR4の内容をスタックに退避
	PUSH	0,GR5	; GR5の内容をスタックに退避
	LAD	GR3,0	; GR3は制御変数として用いる
LOOP	CPA	GR3,GR1
	JZE	END
	LD	GR4,GR2
	ADDA	GR4,GR3	; 出力する文字の格納番地を計算
	LD	GR5,0,GR4	; 出力する文字をレジスタにコピー
	LD	GR4,GR7
	ADDA	GR4,GR6	; 出力先の番地を計算
	ST	GR5,0,GR4	; 出力装置に書き出し
	LAD	GR3,1,GR3
	LAD	GR6,1,GR6
	JUMP	LOOP
END	POP	GR5
	POP	GR4
	POP	GR3
	RET
	END
;============================================================
; 改行を出力装置に書き出すサブルーチン
; 実質的には，GR7で始まるアドレス番地から長さGR6の文字列を出力する
WRTLN	START
	PUSH	0,GR1
	PUSH	0,GR2
	PUSH	0,GR3
	ST	GR6,OUTLEN
	LAD	GR1,0
LOOP	CPA	GR1,OUTLEN
	JZE	END
	LD	GR2,GR7
	ADDA	GR2,GR1
	LD	GR3,0,GR2
	ST	GR3,OUTSTR,GR1
	LAD	GR1,1,GR1
	JUMP	LOOP
END	OUT	OUTSTR,OUTLEN
	LAD	GR6,0	; 文字列を出力して，GR6を初期化
	POP	GR3
	POP	GR2
	POP	GR1
	RET
OUTSTR	DS	256
OUTLEN	DS	1
	END
