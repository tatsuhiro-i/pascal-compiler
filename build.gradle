// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply IDE plugins
apply plugin: 'eclipse'
apply plugin: 'idea'

// Apply PMD plugin for Ave
apply plugin: 'pmd'

// Apply Checkstyle plugin for Ave
apply plugin: 'checkstyle'

// Set default encoding to UTF-8
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

// Set jdk8
sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
  jcenter()

  // Use local lib folder
  flatDir {
     dirs 'lib'
  }
}

dependencies {
  // Load JCasl2 & JComet2 from local folder
  implementation name: 'jcasl2'
  implementation name: 'jcomet2'

  // Load local lib
  implementation fileTree(dir: 'lib', include: '*.jar')

  testImplementation group: 'junit', name: 'junit', version: '4.12'
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.10.0'
  testImplementation group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
  testImplementation group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.18.0'
}


jar {
  // Specify App's entry point
  manifest {
    attributes "Main-Class": "enshud.Main"
  }
  // Include all dependent jars
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
}
// Global test parameters
tasks.withType(Test) {

  // Avoid UP-TO-DATE failure because of gradle caching on Jenkins.
  outputs.upToDateWhen { false }

  // Assume build is success when test failure occurs on Jenkins.
  ignoreFailures = true
}

// Define custom tasks for each sub package
task "s0.trial"(type: Test) { // Use string literal as function name to use dot in task name
  include 'enshud/s0/**'
}

task "s1.lexer"(type: Test) {
  include 'enshud/s1/**'
}

task "s2.parser"(type: Test) {
  include 'enshud/s2/**'
}

task "s3.checker"(type: Test) {
  include 'enshud/s3/**'
}

task "s4.compiler"(type: Test) {
  include 'enshud/s4/**'
}

////////////////////////////////////////////////////////////////////////////////
// Ave

// Verbose options for java execution of Ave
def verboseOpts = [
  '-verbose:class',
  '-XX:+UnlockDiagnosticVMOptions',
  '-XX:+LogVMOutput',
  '-XX:LogFile=./build/reports/javalog/raw.log'
]

// Ave tasks
task "s0.trial.ave"(type: Test) {
  include 'enshud/s0/**'
  jvmArgs = verboseOpts
}

task "s1.lexer.ave"(type: Test) {
  include 'enshud/s1/**'
  jvmArgs = verboseOpts
}

task "s2.parser.ave"(type: Test) {
  include 'enshud/s2/**'
  jvmArgs = verboseOpts
}

task "s3.checker.ave"(type: Test) {
  include 'enshud/s3/**'
  jvmArgs = verboseOpts
}

task "s4.compiler.ave"(type: Test) {
  include 'enshud/s4/**'
  jvmArgs = verboseOpts
}

pmd {
  // To avoid jenkins failure
  ignoreFailures = true

  toolVersion = '6.7.0'
  ruleSetFiles = files("misc/config/pmd.xml")
}

checkstyle {
  // To avoid jenkins failure
  ignoreFailures = true

  toolVersion = '8.12'
  configFile file("misc/config/checkstyle.xml")
}
